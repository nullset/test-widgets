// Generated by CoffeeScript 1.10.0
(function() {
  var selectroReducers;

  selectroReducers = (function(_this) {
    return function(state, action) {
      var base, counter;
      if (state == null) {
        state = {};
      }
      switch (action.type) {
        case 'INIT':
          return SelectroUtilities.merge(state, action.obj);
        case 'FETCH_OPTIONS':
          return SelectroUtilities.merge(state, action.payload);
        case 'UPDATE_OPTIONS':
          return SelectroUtilities.merge(state, action.payload);
        case 'HIDE_SELECTRO':
          return SelectroUtilities.merge(state, {
            isFocused: true,
            query: '',
            options: state.options
          });
        case 'UPDATE_QUERY':
          return SelectroUtilities.merge(state, {
            query: action.query,
            regex: action.regex
          });
        case 'HOVER_PREVIOUS':
          if (state.hoveredIndex === 0) {
            return state;
          } else {
            if (action.collapsible) {
              return SelectroUtilities.merge(state, {
                hoveredIndex: action.counter,
                hoveredSetVia: 'keypress'
              });
            } else {
              return SelectroUtilities.merge(state, {
                hoveredIndex: state.hoveredIndex - 1,
                hoveredSetVia: 'keypress'
              });
            }
          }
          break;
        case 'HOVER_NEXT':
          if (action.collapsible) {
            counter = action.counter;
            return SelectroUtilities.merge(state, {
              hoveredIndex: counter,
              hoveredSetVia: 'keypress'
            });
          } else if (state.hoveredIndex === action.counter - 1) {
            return state;
          } else {
            counter = state.hoveredIndex + 1;
            return SelectroUtilities.merge(state, {
              hoveredIndex: counter,
              hoveredSetVia: 'keypress'
            });
          }
          break;
        case 'SET_HOVERED':
          return SelectroUtilities.merge(state, {
            hoveredIndex: action.hoveredIndex,
            hoveredSetVia: action.hoveredSetVia
          });
        case 'SET_HOVERED_SET_VIA':
          return SelectroUtilities.merge(state, {
            hoveredSetVia: action.hoveredSetVia
          });
        case 'SET_SELECTED':
          delete state.value;
          return SelectroUtilities.merge(state, action.payload);
        case 'SET_SHOW_SEARCH':
          (base = action.payload).hoveredIndex || (base.hoveredIndex = 0);
          return SelectroUtilities.merge(state, action.payload);
        case 'FILTER_OPTIONS':
          delete state.options;
          return SelectroUtilities.merge(state, {
            options: action.options,
            regex: action.regex,
            query: action.query,
            hoveredIndex: action.hoveredIndex,
            hoveredSetVia: 'keypress'
          });
        case 'RESET_QUERY':
          return SelectroUtilities.merge(state, {
            query: '',
            regex: new RegExp('')
          });
        case 'CLEAR_SELECTED':
          state.value = [];
          return SelectroUtilities.merge(state, action.payload);
        case 'SET_POSITION':
          state = SelectroUtilities.merge({}, state);
          delete state.style;
          return SelectroUtilities.merge(state, {
            style: action.style
          });
        case 'TOGGLE_ARROW':
          delete state.collapseState;
          return SelectroUtilities.merge(state, {
            collapseState: action.payload
          });
        default:
          return state;
      }
    };
  })(this);

  this.DOMHelper = {
    activate: function(event, props) {
      var body, elem, modal, node;
      if (props == null) {
        props = {};
      }
      event.preventDefault();
      event.stopPropagation();
      elem = event.currentTarget || event.target;
      modal = document.getElementById('selectro-modal');
      if (!modal) {
        body = document.querySelector('body');
        node = document.createElement('div');
        node.setAttribute('id', 'selectro-modal');
        node.setAttribute('class', 'selectro-modal');
        body.appendChild(node);
        modal = document.getElementById('selectro-modal');
      }
      Array.prototype.slice.call(elem.attributes).forEach(function(attr) {
        var name, temp, value;
        if (/^data-/.test(attr.name)) {
          name = attr.name.replace(/^data-/, '');
        } else {
          name = attr.name;
        }
        if (name === 'content') {
          if (attr.nodeValue === '') {
            return props[name] = {};
          } else {
            return props[name] = JSON.parse(attr.nodeValue);
          }
        } else if (name === 'selectrovalue') {
          return props.value = JSON.parse(attr.nodeValue);
        } else {
          if (name !== 'value') {
            value = (function() {
              var error, error1;
              try {
                temp = JSON.parse(attr.nodeValue);
                try {
                  return JSON.parse(temp);
                } catch (error) {
                  return temp;
                }
              } catch (error1) {
                return attr.nodeValue;
              }
            })();
            return props[name] = value;
          }
        }
      });
      props.element = elem;
      elem.focus();
      if (props.value) {
        props.value = props.value.map(function(opt) {
          var option, text, value;
          text = opt[0] === null ? '' : opt[0].toString();
          if (opt.length === 1) {
            value = text;
            return {
              text: text,
              value: text
            };
          } else {
            value = opt[1] === null ? '' : opt[1].toString();
            option = {
              text: text,
              value: value
            };
            if (opt.length === 3) {
              option.meta = opt[2];
            }
            return option;
          }
        });
      } else {
        props.value = [];
      }
      if (!props.hasOwnProperty('options')) {
        props.options = [];
      }
      props.store = Redux.createStore(selectroReducers);
      return React.render(React.createElement(Selectro, props), modal);
    }
  };

}).call(this);
