<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="index.css" media="screen" title="no title">
  </head>
  <body>
    
    <!-- <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p> -->
    
    <!-- <div class="table-wrapper wrapper first-shot">
      <!-- @include table -->
    </div> -->
    
    <div class="scrolling-tbody wrapper">
      <!-- @include table -->
    </div>
    
    <div class="scrolling-tbody-2 wrapper">
      <!-- @include table -->
    </div>
    
    <div class="caption-table wrapper">
      <!-- @include table -->
    </div>
  
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
  
    <script src="jquery-3.1.1.min.js" charset="utf-8"></script>
    <script type="text/javascript">
      
      // Create the measurement node
      var scrollDiv = document.createElement("div");
      scrollDiv.className = "scrollbar-measure";
      document.body.appendChild(scrollDiv);

      // Get the scrollbar width
      window.scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      console.warn(scrollbarWidth); // Mac:  15

      // Delete the DIV 
      document.body.removeChild(scrollDiv);
    
    
    
      var $tables = $('.first-shot table');
      
      $tables.each(function(i, table) {
        var parent = table.parentElement;
        var theadTR = table.querySelector('thead tr:first-child');
        // var spacer = $(table).find('thead tr:first-child').prepend('<tr><td colspan="' + $(theadTR).find('th').length + '">XXX</td></tr>')
        
        // NOTE : spacer must be *prependend* not appended, otherwise there will be a 1px jank on scroll (appears to be a rendering engine bug).
        var spacer = $(theadTR).clone();
        $(table).find('thead').prepend(spacer);
        spacer.css('visibility', 'hidden');
        $(theadTR).addClass('blah').width($(parent).width() - window.scrollbarWidth);
      
        theadTR.querySelectorAll('th').forEach(function(th) {
          // th.style.width = window.getComputedStyle(th).width;
          $clip = $('<div class="clip" />');
          $clip.width(window.getComputedStyle(th).width);
          $(th).wrapInner($clip);
        });
      
        var scrollParents = $(table)
          .parents()
          .toArray()
          .filter(function(parent, i, array) {
            var overflowY = $(parent).css('overflow-y');
            if (overflowY !== 'visible') {
              return parent;
            }
          });
        scrollParents.push(document);
          
        if (scrollParents.length > 1) {
          scrollParents.forEach(function(elem) {
            elem.onscroll = function(event) {
              theadTR.style.position = 'fixed';
              
                var scrollOffset = scrollParents.reduce(function(acc, parent) {
                  if (typeof parent.scrollingElement === 'undefined') {
                    console.log(parent.scrollLeft, elem.scrollLeft);
                    // return {top: acc.top + parent.scrollTop, left: acc.left + parent.scrollLeft};
                    return {top: acc.top + parent.scrollTop, left: acc.left + parent.scrollLeft};
                  } else {
                    console.log('-----', parent.scrollLeft, elem.scrollLeft);
                    return {top: parent.scrollingElement.scrollTop, left: elem.scrollLeft};
                  }
                }, {top: 0, left: 0});
                theadTR.style.top = scrollParents[0].offsetTop - scrollOffset.top + 'px';
                // theadTR.style.left = scrollParents[0].offsetTop - scrollOffset.left + 'px';
                theadTR.querySelector('th .clip').style.marginLeft = -scrollOffset.left + 'px';
                  // th.style.marginLeft = -scrollOffset.left + 'px';
            }
          });
        } else {
          
        }
      
      });
      
      
      // --------------------------------
      
      // var sc = document.querySelector('.scrolling-tbody');
      // var thead = sc.querySelectorAll('thead tr > *');
      // 
      // $(sc).on('scroll', function(event) {
      //   // requestAnimationFrame(function() {
      //   console.log(event.target.scrollTop);
      //     var transformation = 'translateY(' + event.target.scrollTop + 'px)'
      //     // $thead.css({webkitTransform: transformation, transform: transformation});
      //     thead.forEach(function(th) {
      //       th.style.transform = transformation;
      //     });
      //     // thead.style.transform = transformation;
      //   // });
      //   // console.log(event.target.scrollTop);
      // });
      
      
      // ------------------------------
      var $sc = $('.scrolling-tbody');
      var $offsetElems = $sc.find('thead tr > *');
      var $scTable = $sc.find('table');
      
      function positionHeader($elems, scrollY) {
        var transformation = 'translateY(' + scrollY + 'px)';
        $elems.each(function(i, elem) {
          $(elem).css({
            '-webkit-transform': transformation,
            '-moz-transform': transformation,
            '-ms-transform': transformation,
            '-o-transform': transformation,
            transform: transformation
          });
        });
      }
      
      $sc.on('wheel mousewheel', function(event) {
        event.preventDefault();
        console.log('delta Y', event.originalEvent.deltaY);
        
        
        // requestAnimationFrame(function() {
        var existingX = typeof $sc.data('scroll-x') === 'undefined' ? 0 : parseInt($sc.data('scroll-x'), 10);
        var existingY = typeof $sc.data('scroll-y') === 'undefined' ? 0 : parseInt($sc.data('scroll-y'), 10);
        var newX = existingX + event.originalEvent.deltaX;
        var newY = existingY + event.originalEvent.deltaY;
        if (newX < 0) {
          newX = 0;
        }
        if (newY < 0) {
          newY = 0;
        }
        
        if (newX > $scTable.width() - $sc.width() + ($sc[0].offsetWidth - $sc[0].clientWidth)) {
          newX = existingX;
        }
        if (newY > $scTable.height() - $sc.height() + ($sc[0].offsetHeight - $sc[0].clientHeight)) {
          newY = existingY;
        }
        
        $sc.data({'scroll-x': newX, 'scroll-y': newY});
        $sc.scrollLeft(newX);
        $sc.scrollTop(newY);
        positionHeader($offsetElems, newY);
        // var transformation = 'translateY(' + (newY) + 'px)';
        // $offsetElems.each(function(i, elem) {
        //   $(elem).css({
        //     '-webkit-transform': transformation,
        //     '-moz-transform': transformation,
        //     '-ms-transform': transformation,
        //     '-o-transform': transformation,
        //     transform: transformation
        //   });
        // });
      });
      
      // $sc.on('mousedown', function(e) {
      //   $sc.data('mouse', {down: true, x: e.pageX - this.offsetLeft, y: e.pageY - this.offsetTop});
      // });
      // $sc.on('mouseup', function(e) {
      //   $sc.data('mouse', undefined);
      // });
      $sc.on('scroll', function(event) {
        console.log($sc.scrollTop());
        // $sc.data('scroll-x', )
        $sc.data({'scroll-x': $sc.scrollLeft(), 'scroll-y': $sc.scrollTop()});
        
        positionHeader($offsetElems, $sc.scrollTop());
        // var transformation = 'translateY(' + ($sc.scrollTop()) + 'px)';
        // $offsetElems.each(function(i, elem) {
        //   $(elem).css({
        //     '-webkit-transform': transformation,
        //     '-moz-transform': transformation,
        //     '-ms-transform': transformation,
        //     '-o-transform': transformation,
        //     transform: transformation
        //   });
        // });



        // if ($sc.data('mouse') && $sc.data('mouse').down) {

          // $sc.scrollTop($sc.scrollTop() + $sc.height())
          
          // scrollHeight = 0;
          // $sc.find("> *").each(function(i, elem) {
          //   scrollHeight += $(elem).outerHeight();
          // });
          // 
          // console.log('scroll', scrollHeight);
          // console.log($sc.data('mouse').y);
          // // $sc.scrollTop(($sc.data('mouse').y / scrollHeight) * scrollHeight);
          // 
          // // alert(($sc.data('mouse').y * scrollHeight) / 100)
          // $sc.scrollLeft($sc.data('mouse').x);
        // }
      });
      // ------------------------------



      // var sc2 = document.querySelector('.scrolling-tbody-2');
      // var $thead = $('.scrolling-tbody-2 thead');
      // var $tbody = $('.scrolling-tbody tbody');
      // sc2.onmousewheel = function(event) {
      //   if (event.deltaY) {
      //     // requestAnimationFrame(function() {
      //       var currentValue = parseInt($thead[0].style.transform.replace(/\D/g,''), 10);
      //       if (isNaN(currentValue)) {
      //         currentValue = 0;
      //       }
      //       console.log(currentValue, event.deltaY);
      //       var value = currentValue + event.deltaY;
      //       var transformation = 'translateY(' + value + 'px)';
      //       var negTransformation = 'translateY(' + -value + 'px)'
      //       $thead.css({webkitTransform: transformation, transform: transformation});
      //       $tbody.css({webkitTransform: negTransformation, transform: negTransformation});
      //       event.preventDefault();
      //     // });
      //     // console.log(event.target.scrollTop);
      //   }
      // }
      
      
      // -------------------------------------
      console.info('--- caption table')
      var $captionTable = $('.caption-table');
      var $thead = $captionTable.find('thead');
      var $caption = $('<div></div>');
      var $newTable = $('<table></table>');
      $caption.append($newTable.append($thead.clone()));
      $captionTable.before($caption);



      $('table thead').find('th').each(function(i, th) {
        $(th).click(function() {
          alert()
        })
      })

    </script>
  </body>
</html>